{"version":3,"sources":["components/Data.js","components/Details.js","helpers/getInfoPoke.js","helpers/getDescription.js","components/PokeGridItem.js","hooks/useFetchInfoPoke.js","hooks/useFetchDescription.js","helpers/getPoke.js","components/PokeGrid.js","hooks/useFetchPoke.js","img/argentina.svg","img/united-states.svg","components/PokeApp.js","index.js"],"names":["Data","data","Details","abilities","description","lg","types","map","type","name","ability","replace","getInfoPoke","url","a","fetch","resp","json","id","b","length","getDescription","undefined","flavor_text_entries","i","language","flavor_text","PokeGridItem","useState","show","setShow","setData","useEffect","then","useFetchInfoPoke","desc","setDesc","catch","useFetchDescription","urlImg","Col","className","onClick","sm","md","src","alt","Modal","onHide","Body","getPoke","offset","results","PokeGrid","initialOffset","page","setPage","setOffset","poke","pokes","setPokes","useFetchPoke","handleChange","e","target","value","Row","pokemon","xs","onChange","preventDefault","parseInt","onSubmit","PokeApp","setLanguage","arg","usa","Container","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ef240218.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport const Data = ({ data }) => {\r\n    return (\r\n        <p>\r\n            { data }\r\n        </p>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { Data } from './Data';\r\n\r\nexport const Details = ({ abilities, description, lg, types }) => {\r\n    return (\r\n        <div>\r\n            <h5>\r\n                {\r\n                    lg === 'es' ? 'Tipo' : 'Type' \r\n                }\r\n            </h5>\r\n            {\r\n                types.map( type => (\r\n                    <Data\r\n                        data = { type.name } \r\n                        key = { type.name }\r\n                        {...type}\r\n                    />\r\n                )) \r\n            }\r\n            <h5>\r\n                {\r\n                    lg === 'es' ? 'Habilidades' : 'Abilities' \r\n                }\r\n            </h5>\r\n            {\r\n                abilities.map( ability => (\r\n                    <Data\r\n                        data = { ability.name }\r\n                        key = { ability.name }\r\n                        {...ability}\r\n                    />\r\n                )) \r\n            } \r\n            <h5>\r\n                {\r\n                    lg === 'es' ? 'Descripci√≥n' : 'Description' \r\n                }\r\n            </h5>\r\n            <p>\r\n                {\r\n                    description.replace('\f',' ')\r\n                }\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n","\r\n\r\nexport const getInfoPoke = async( url ) =>{\r\n\r\n    const resp = await fetch( url );\r\n    const { id, abilities, types } = await resp.json();\r\n    \r\n    let a = [ 0 ];\r\n    let b = [ 0 ];\r\n    \r\n    const data =[\r\n        id,\r\n        abilities.map( () => {\r\n            a = [ a, ...a ];\r\n            return{\r\n                name: abilities[a.length-2].ability.name\r\n            }\r\n            \r\n        }),\r\n        types.map( ()=> {\r\n            b = [ b, ...b ];\r\n            return{\r\n                name: types[b.length-2].type.name\r\n            }    \r\n        }),\r\n    ]\r\n\r\n    return data;\r\n}","\r\n\r\nexport const getDescription = async( id, lg ) =>{\r\n\r\n    if (id !== undefined ) {\r\n\r\n        const url = `https://pokeapi.co/api/v2/pokemon-species/${ id }`;\r\n        const resp = await fetch( url );\r\n        const { flavor_text_entries } = await resp.json();\r\n            \r\n        for (let i = 0; i < flavor_text_entries.length; i++) {\r\n\r\n            if (flavor_text_entries[i].language.name === lg) {\r\n                const description = flavor_text_entries[i].flavor_text;\r\n                return description;\r\n            }\r\n        }\r\n        \r\n    }\r\n}","import React, { useState } from 'react'\r\nimport { Details } from './Details';\r\nimport { useFetchInfoPoke } from '../hooks/useFetchInfoPoke';\r\nimport { useFetchDescription } from '../hooks/useFetchDescription';\r\n\r\nimport { Col, Modal } from 'react-bootstrap'\r\n\r\nexport const PokeGridItem = ({ lg, name, url}) => {\r\n\r\n    const [show, setShow] = useState( false );\r\n    const { id, abilities, types } = useFetchInfoPoke( url );\r\n    const { description } = useFetchDescription( id, lg );\r\n\r\n    \r\n    const urlImg = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/dream-world/${ id }.svg`;\r\n\r\n    return (\r\n        <>\r\n            {\r\n                id !== undefined &&\r\n                <Col \r\n                    className = \"card\"\r\n                    onClick = { () => setShow(true) } \r\n                    sm = { 4 }\r\n                    md = { 3 }\r\n                    lg = { 2 }\r\n                >\r\n                    <div className=\"image\">\r\n                        <img src={ urlImg } alt={ name } />\r\n                    </div>\r\n                    <h3>\r\n                        { name }\r\n                    </h3>\r\n                </Col>\r\n            }\r\n            <Modal\r\n                show = { show }\r\n                onHide = { () => setShow(false) }\r\n            >\r\n                <div className = \"justify-content-md-center align-self-center landscape\">\r\n                    <img src={ urlImg } alt={ name } className = \"imgModal\" />\r\n                </div>\r\n                <Modal.Body>\r\n                    <h4>{ name }</h4>\r\n                    <Details \r\n                        abilities= { abilities } \r\n                        description = { description } \r\n                        lg = { lg }\r\n                        types = { types }\r\n                    />\r\n                </Modal.Body>\r\n            </Modal>\r\n        </>\r\n    )\r\n}\r\n","import { useState, useEffect } from \"react\"\r\nimport { getInfoPoke } from \"../helpers/getInfoPoke\";\r\n\r\nexport const useFetchInfoPoke = ( url ) => {\r\n\r\n    const [data, setData] = useState([]);\r\n\r\n    useEffect( () =>{\r\n        \r\n        getInfoPoke( url )\r\n            .then( data => {\r\n                 \r\n                setData({\r\n                    id: data[0],\r\n                    abilities: data[1],\r\n                    types: data[2]\r\n                });\r\n            }\r\n        )\r\n    }, [ url ])\r\n\r\n    return data;\r\n}\r\n","import { useState, useEffect } from \"react\"\r\nimport { getDescription } from \"../helpers/getDescription\";\r\n\r\nexport const useFetchDescription = ( id, lg ) => {\r\n\r\n    const [desc, setDesc] = useState({});\r\n\r\n    useEffect( () =>{\r\n        \r\n        getDescription( id, lg )\r\n            .then( description => {\r\n                 \r\n                setDesc({\r\n                    description\r\n                });\r\n            })\r\n            .catch( () => {\r\n                setDesc({});\r\n            })\r\n        }, [ id, lg ]);\r\n\r\n    return desc;\r\n}","\r\n\r\nexport const getPoke = async( offset ) =>{\r\n\r\n    const url = `https://pokeapi.co/api/v2/pokemon?offset=${ offset }&limit=5`;\r\n\r\n    const resp = await fetch( url );\r\n    const { results } = await resp.json();\r\n\r\n    return results;\r\n}","import React, { useState } from 'react'\r\nimport { PokeGridItem } from './PokeGridItem';\r\nimport { useFetchPoke } from '../hooks/useFetchPoke';\r\n\r\nimport { Col, Row } from 'react-bootstrap';\r\n\r\nexport const PokeGrid = ( { lg, initialOffset = 0 } ) => {\r\n\r\n    const [ page, setPage] = useState( 1 );\r\n    const [ offset, setOffset] = useState( initialOffset );\r\n    const { poke } = useFetchPoke( offset );\r\n\r\n    const handleChange = ( e ) => {\r\n        setPage(e.target.value);\r\n    }\r\n\r\n    const increment = ( e ) => {\r\n        e.preventDefault();\r\n\r\n        setPage( parseInt(page) + 1 );\r\n        setOffset( offset + 5 );\r\n    }\r\n    \r\n    const decrement = ( e ) => {\r\n        e.preventDefault();\r\n\r\n        setPage( page - 1 );\r\n        setOffset( offset - 5 )\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (page > 0 && page < 131) {\r\n            setPage( page );\r\n            setOffset( (page - 1) * 5 );            \r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Row className=\"justify-content-md-center align-self-center\">\r\n                {\r\n                    poke.map( pokemon => (\r\n                        <PokeGridItem\r\n                            lg = { lg } \r\n                            key = { pokemon.name }\r\n                            {...pokemon}\r\n                        />\r\n                    )) \r\n                }\r\n            </Row>\r\n            <Row className=\"justify-content-md-center align-self-end\">\r\n                <Col \r\n                    xs = { 6 } \r\n                    sm = { 4 }\r\n                    lg = { 2 }\r\n                >\r\n                    { page > 1 &&  \r\n                        <button\r\n                            className = \"pg\"\r\n                            onChange = { handleChange }\r\n                            onClick = { decrement }\r\n                        >\r\n                            {\r\n                                lg === 'es' ? 'Anterior' : 'Previus'\r\n                            }\r\n                        </button>\r\n                    }\r\n                </Col>\r\n                <Col \r\n                    xs = { 6 }\r\n                    sm = { 4 }\r\n                    lg = { 2 }\r\n                >\r\n                    { page < 131 &&\r\n                        <button\r\n                            className = \"pg\"\r\n                            onChange= { handleChange }\r\n                            onClick= { increment }\r\n                        >\r\n                            { lg === 'es' ? 'Siguiente' : 'Next' }\r\n                        </button>\r\n                    }\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col className = \"pagination ml-auto\" xs = {2} sm = {2} md = { 2 } lg = { 1 }>\r\n                    <p className = \"ml-auto\"> { lg === 'es' ? 'P√°gina' : 'Page' } </p>\r\n                </Col>\r\n                <Col xs = {2} sm = {2} md = { 2 } lg = { 1 }>\r\n                    <form onSubmit={ handleSubmit }>\r\n                        <input \r\n                            name = \"Page\"\r\n                            onChange = { handleChange }\r\n                            type = \"number\"\r\n                            value = { page }\r\n                        />\r\n                    </form>\r\n                </Col>\r\n                <Col className= \"pagination\" xs = {2} sm = {2} md = { 2 } lg = { 1 }>\r\n                    <p> { lg === 'es' ? 'de 130' : 'of 130' } </p>\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    );\r\n}\r\n","import { useState, useEffect } from \"react\"\r\nimport { getPoke } from \"../helpers/getPoke\";\r\n\r\nexport const useFetchPoke = ( offset ) => {\r\n\r\n    const [pokes, setPokes] = useState({\r\n        poke: [],\r\n    });\r\n\r\n    useEffect( () =>{\r\n        \r\n        getPoke( offset )\r\n            .then( results => {\r\n                 \r\n                setPokes({\r\n                    poke: results,\r\n                });\r\n\r\n            })\r\n    }, [ offset ])\r\n\r\n    return pokes;\r\n}\r\n","export default __webpack_public_path__ + \"static/media/argentina.522fa6a7.svg\";","export default __webpack_public_path__ + \"static/media/united-states.c29455bd.svg\";","import React, { useState } from 'react';\r\nimport { PokeGrid } from './PokeGrid';\r\n\r\nimport { Container, Row } from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nimport arg from '../img/argentina.svg';\r\nimport usa from '../img/united-states.svg'\r\n\r\nexport const PokeApp = () => {\r\n\r\n    const [language, setLanguage] = useState('es');\r\n\r\n    return (\r\n        <>\r\n            <div className = \"language\">\r\n                <h2>PokeApp</h2>\r\n                <div\r\n                    className = \"lgGrid ml-auto\"\r\n                    onClick = { () => setLanguage('es') }\r\n                >\r\n                    <img \r\n                        className = \"lg\"\r\n                        src = { arg }\r\n                        alt = \"Cambiar idioma al espa√±ol\"\r\n                    />\r\n                </div>\r\n                <div\r\n                    className = \"lgGrid\"\r\n                    onClick = { () => setLanguage('en') }\r\n                >\r\n                    <img \r\n                        className = \"lg\"\r\n                        src = { usa }\r\n                        alt = \"Change language to English\"\r\n                    />\r\n                </div>\r\n            </div>\r\n            <Container>\r\n                <Row className = \"justify-content-md-center align-self-center\">\r\n                    <h3>{ language === 'es' ? 'Encontr√° tu POK√âMON!!' : 'Find your POK√âMON!!'   }</h3>\r\n                </Row>\r\n                <PokeGrid lg = { language }/> \r\n            </Container>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { PokeApp } from './components/PokeApp';\n\nimport './index.css';\n\nReactDOM.render(\n  <PokeApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}